sum(x*y)/sum(x^2)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
sum(x*y)/sum(x^2)
data(mtcars)
lm(mpg ~ wt, data=mtcars)
data(mtcars)
x<-mtcars$wt
y<-mtcars$mpg
beta1<-cor(y,x)*sd(y)/sd(x)
coef(lm(mtcars$mpg~mtcars$wt))
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
miu <- mean(x)
S<-sd(x)
(8.58 - miu)/S
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
beta1<-cor(y,x)*sd(y)/sd(x)
beta0<-mean(x) - beta1*mean(x)
coef(lm(y~x))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
nosim <- 1000
n <- 10
sd(apply(matrix(rnorm(nosim * n), nosim), 1, mean))
sd(apply(matrix(rnorm(nosim * n), nosim), 1, mean))
nosim <- 10000
n <- 10
sd(apply(matrix(rnorm(nosim * n), nosim), 1, mean))
sd(apply(matrix(rnorm(nosim * n), nosim), 1, mean))
nosim <- 1000000
n <- 10
sd(apply(matrix(rnorm(nosim * n), nosim), 1, mean))
nosim <- 1000
n <- 100
sd(apply(matrix(rnorm(nosim * n), nosim), 1, mean))
nosim <- 1000
n <- 100
sd(apply(matrix(rnorm(nosim * n), nosim), 1, mean))
1/sqrt(n)
n <- 10
sd(apply(matrix(rnorm(nosim * n), nosim), 1, mean))
1/sqrt(n)
nosim <- 10000
n <- 10
sd(apply(matrix(rnorm(nosim * n), nosim), 1, mean))
1/sqrt(n)
nosim <- 100000
n <- 10
sd(apply(matrix(rnorm(nosim * n), nosim), 1, mean))
1/sqrt(n)
nosim <- 100000
n <- 10
sd(apply(matrix(runif(nosim * n), nosim), 1, mean))
1/sqrt(n)
nosim <- 1000
n <- 10
sd(apply(matrix(runif(nosim * n), nosim), 1, mean))
1/sqrt(n)
1/sqrt(12*n)
---
data(mtcars)
summary(mtcars)
head(mtcars)
dim(mtcars)
install.packages("UsingR")
library(manipulate)
myHist <- function(mu){
mse <- mean((galton$child - mu)^2)
g <- ggplot(galton, aes(x = child)) + geom_histogram(fill = "salmon", colour = "black", binwidth=1)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
install.packages("manipulate")
library(manipulate)
library(ggplot2)
myHist <- function(mu){
mse <- mean((galton$child - mu)^2)
g <- ggplot(galton, aes(x = child)) + geom_histogram(fill = "salmon", colour = "black", binwidth=1)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(UsingR); data(galton); library(reshape); long <- melt(galton)
g <- ggplot(long, aes(x = value, fill = variable))
g <- g + geom_histogram(colour = "black", binwidth=1)
g <- g + facet_grid(. ~ variable)
g
data(galton);
library(reshape);
install.packages("reshape")
library(UsingR);
data(galton);
library(reshape);
long <- melt(galton)
g <- ggplot(long, aes(x = value, fill = variable))
g <- g + geom_histogram(colour = "black", binwidth=1)
g <- g + facet_grid(. ~ variable)
g
library(manipulate)
library(ggplot2)
myHist <- function(mu){
mse <- mean((galton$child - mu)^2)
g <- ggplot(galton, aes(x = child)) + geom_histogram(fill = "salmon", colour = "black", binwidth=1)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
weighted.mean(x, w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ 0 + x)
data(mtcars)
lm(mpg ~ wt, data=mtcars)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
weighted.mean(x, w)
library(manipulate)
library(rCharts)
library(shiny)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(rCharts)
dTable(airquality, sPaginationType = "full_numbers")
library(rCharts)
dTable(airquality, sPaginationType = "full_numbers")
install.packages("rCharts")
library(rCharts)
library(rCharts)
dTable(airquality, sPaginationType = "full_numbers")
runApp("app1")
suppressMessages(library(caret))
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
install.packages("caret")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
require(caret)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
IL <- training[,grep('^IL', x = names(training) )]
createDataPartition
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y~x)
summary(fit)
library(caret)
rversions::
rversions
R.version
library(caret)
library(caret)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
install.packages("ElemStatLearn")
shiny::runApp('Cursos/Data Science/Developing Data Products/ShinyApps/Test1')
shiny::runApp('Cursos/Data Science/Developing Data Products/ShinyApps/Test1')
shiny::runApp('Cursos/Data Science/Developing Data Products/ShinyApps/Test1')
x <- 0
shiny::runApp('Cursos/Data Science/Developing Data Products/ShinyApps/Test1')
shiny::runApp('Cursos/Data Science/Developing Data Products/ShinyApps/Test1')
setwd("~/Cursos/Data Science/Developing Data Products/Project2")
suppressPackageStartupMessages(library(googleVis))
install.packages("googleVis")
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
print(M, "chart")
shiny::runApp()
}
shiny::runApp()
x <- data.frame("Energy" = 2, "Soil" = 3)
x
library(ggplot2)
data(mtcars)
mtcars
dim(mtcars)
boxplot(mpg~am,data=mtcars,xlab="Fig 1. Transmission Type : 0-Auto, 1-Manual",ylab="Mileage mpg",
main="MPG Vs. Transmission Design")
boxplot(mpg~cyl,data=mtcars,xlab="Fig 1. Transmission Type : 0-Auto, 1-Manual",ylab="Mileage mpg",
main="MPG Vs. Transmission Design")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
mtcars
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
boxplot(mpg~hp,data=mtcars,xlab="Fig 1. Transmission Type : 0-Auto, 1-Manual",ylab="Mileage mpg",
main="MPG Vs. Transmission Design")
boxplot(mpg~cyl,data=mtcars,xlab="Fig 1. Transmission Type : 0-Auto, 1-Manual",ylab="Mileage mpg",
main="MPG Vs. Transmission Design")
header(mtcars)
summary(mtcars)
head(mtcars)
boxplot(mpg~drat,data=mtcars,xlab="Fig 1. Transmission Type : 0-Auto, 1-Manual",ylab="Mileage mpg", main="MPG Vs. Transmission Design")
boxplot(mpg~wt,data=mtcars,xlab="Fig 1. Transmission Type : 0-Auto, 1-Manual",ylab="Mileage mpg", main="MPG Vs. Transmission Design")
boxplot(mpg~qsec,data=mtcars,xlab="Fig 1. Transmission Type : 0-Auto, 1-Manual",ylab="Mileage mpg", main="MPG Vs. Transmission Design")
boxplot(mpg~vs,data=mtcars,xlab="Fig 1. Transmission Type : 0-Auto, 1-Manual",ylab="Mileage mpg", main="MPG Vs. Transmission Design")
boxplot(mpg~gear,data=mtcars,xlab="Fig 1. Transmission Type : 0-Auto, 1-Manual",ylab="Mileage mpg", main="MPG Vs. Transmission Design")
boxplot(mpg~carb,data=mtcars,xlab="Fig 1. Transmission Type : 0-Auto, 1-Manual",ylab="Mileage mpg", main="MPG Vs. Transmission Design")
shiny::runApp()
shiny::runApp()
shiny::runApp()
boxplot(mpg~renderPrint({input$Input1}),data=mtcars,xlab="Fig 1. Transmission Type : 0-Auto, 1-Manual",ylab="Mileage mpg",
}
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?head
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
data <- mtcars
modelFit_RT <- train(mpg ~., method="rpart", data=data, trControl = trainControl(method="cv", number=10))
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
modelFit_RT <- train(mpg ~., method="rpart", data=data, trControl = trainControl(method="cv", number=10))
library(caret)
modelFit_RT <- train(mpg ~., method="rpart", data=data, trControl = trainControl(method="cv", number=10))
fancyRpartPlot(modelFit_RT$finalModel)
dim(data)
summary(data)
myTesting <- data.frame("cyl"=2, "disp"=200, "hp"=100, "drat"=4, "wt"=4, "qsec"=20, "vs"=1, "am"=1, gear=4, "carb"=2)
myTesting
predictions <- predict(modelFit_RT, myTesting)
cmMatrix <- confusionMatrix(predictions, myTesting$classe)
cmMatrix <- confusionMatrix(predictions, myTesting$mpg)
dim(myTesting)
dim(data)
names(myTesting)
names(data)
myTesting <- data.frame("mpg"=20,cyl"=2, "disp"=200, "hp"=100, "drat"=4, "wt"=4, "qsec"=20, "vs"=1, "am"=1, gear=4, "carb"=2)
myTesting <- data.frame("mpg"=20,cyl"=2, "disp"=200, "hp"=100, "drat"=4, "wt"=4, "qsec"=20, "vs"=1, "am"=1, gear=4, "carb"=2)
myTesting <- data.frame("mpg"=20, "cyl"=2, "disp"=200, "hp"=100, "drat"=4, "wt"=4, "qsec"=20, "vs"=1, "am"=1, gear=4, "carb"=2)
names(myTesting)
names(data)
predictions <- predict(modelFit_RT, myTesting)
cmMatrix <- confusionMatrix(predictions, myTesting$mpg)
levels(myTesting)
levels(data)
predictions <- predict(modelFit_RT, myTesting)
predictions
myTesting <- data.frame("cyl"=2, "disp"=200, "hp"=100, "drat"=4, "wt"=4, "qsec"=20, "vs"=1, "am"=1, gear=4, "carb"=2)
predictions <- predict(modelFit_RT, myTesting)
predictions
predictions <- predict(modelFit_RT, myTesting)
predictions
myTesting <- data.frame("cyl"=4, "disp"=200, "hp"=100, "drat"=4, "wt"=4, "qsec"=20, "vs"=1, "am"=1, gear=4, "carb"=2)
myTesting <- data.frame("cyl"=4, "disp"=200, "hp"=200, "drat"=4, "wt"=4, "qsec"=20, "vs"=1, "am"=1, gear=4, "carb"=2)
predictions <- predict(modelFit_RT, myTesting)
predictions
modelFit_RT <- train(mpg ~., method="rpart", data=data, trControl = trainControl(method="cv", number=10))
myTesting <- data.frame("cyl"=4, "disp"=200, "hp"=200, "drat"=4, "wt"=4, "qsec"=20, "vs"=1, "am"=1, gear=4, "carb"=2)
myTesting <- data.frame("cyl"=4, "disp"=200, "hp"=200, "drat"=4, "wt"=4, "qsec"=20, "vs"=1, "am"=0, gear=2, "carb"=2)
myTesting
predictions <- predict(modelFit_RT, myTesting)
predictions
head(data)
myTesting <- data.frame("cyl"=4, "disp"=200, "hp"=200, "drat"=2, "wt"=2, "qsec"=15, "vs"=0, "am"=0, gear=6, "carb"=4)
predictions <- predict(modelFit_RT, myTesting)
predictions
modelFit_RPART <- rpart(mpg ~ ., data=data, method="class")
modelFit_RPART <- rpart(mpg ~ ., data=data, method="class")
predictions <- predict(modelFit_RPART, myTesting, type = "class")
predictions
cmMatrix <- confusionMatrix(predictions, myTesting$mpg)
myTesting
cmMatrix <- confusionMatrix(predictions, myTesting)
cmMatrix <- confusionMatrix(predictions, myTesting$am)
myTesting <- data.frame("cyl"=8, "disp"=200, "hp"=200, "drat"=2, "wt"=2, "qsec"=25, "vs"=0, "am"=0, gear=6, "carb"=4)
myTesting
predictions <- predict(modelFit_RT, myTesting)
predictions
myTesting <- data.frame("cyl"=4, "disp"=200, "hp"=200, "drat"=2, "wt"=2, "qsec"=25, "vs"=0, "am"=0, gear=6, "carb"=4)
myTesting
predictions <- predict(modelFit_RT, myTesting)
predictions
myTesting <- data.frame("cyl"=2, "disp"=200, "hp"=200, "drat"=2, "wt"=2, "qsec"=25, "vs"=0, "am"=0, gear=6, "carb"=4)
predictions <- predict(modelFit_RT, myTesting)
predictions
myTesting <- data.frame("cyl"=1, "disp"=200, "hp"=200, "drat"=2, "wt"=2, "qsec"=25, "vs"=0, "am"=0, gear=6, "carb"=4)
predictions <- predict(modelFit_RT, myTesting)
predictions
myTesting <- data.frame("cyl"=6, "disp"=200, "hp"=200, "drat"=2, "wt"=2, "qsec"=25, "vs"=0, "am"=0, gear=6, "carb"=4)
predictions <- predict(modelFit_RT, myTesting)
predictions
head(data)
myTesting <- data.frame("cyl"=6, "disp"=160, "hp"=110, "drat"=2, "wt"=4, "qsec"=16, "vs"=0, "am"=1, gear=4, "carb"=4)
predictions <- predict(modelFit_RT, myTesting)
predictions
myTesting <- data.frame("cyl"=6, "disp"=360, "hp"=110, "drat"=2, "wt"=4, "qsec"=16, "vs"=0, "am"=1, gear=4, "carb"=4)
predictions <- predict(modelFit_RT, myTesting)
predictions
myTesting <- data.frame("cyl"=4, "disp"=360, "hp"=110, "drat"=2, "wt"=4, "qsec"=16, "vs"=0, "am"=1, gear=4, "carb"=1)
predictions <- predict(modelFit_RT, myTesting)
predictions
modelFit_RPART <- rpart(mpg ~ ., data=data, method="class")
predictions <- predict(modelFit_RPART, myTesting, type = "class")
prdictions
modelFit_RPART <- rpart(mpg ~ ., data=data, method="class")
predictions <- predict(modelFit_RPART, myTesting, type = "class")
predictions
predictions <- predict(modelFit_RPART, myTesting)
predictions
predictions <- predict(modelFit_RPART, myTesting, type = "class")
predictions
modelFit_RT <- train(mpg ~., method="rpart", data=data, trControl = trainControl(method="cv", number=10))
predictions <- predict(modelFit_RT, myTesting)
predictions
predictions <- predict(modelFit_RPART, myTesting, type = "class")
predictions
myTesting <- data.frame("cyl"=8, "disp"=360, "hp"=110, "drat"=2, "wt"=4, "qsec"=16, "vs"=0, "am"=1, gear=4, "carb"=8)
predictions <- predict(modelFit_RPART, myTesting, type = "class")
predictions
myTesting <- data.frame("cyl"=2, "disp"=160, "hp"=110, "drat"=2, "wt"=4, "qsec"=16, "vs"=0, "am"=1, gear=4, "carb"=4)
predictions <- predict(modelFit_RT, myTesting)
predictions
predictions <- predict(modelFit_RPART, myTesting, type = "class")
predictions
modelFit_RF = train(mpg~., method="rf", data=data, prox=TRUE)
predictions <- predict(modelFit_RF, myTesting)
predictions
cmMatrix <- confusionMatrix(predictions, myTesting$mpg)
summary(data)
head(data)
myTesting <- data.frame("cyl"=6, "disp"=225, "hp"=105, "drat"=3, "wt"=3.4, "qsec"=20, "vs"=1, "am"=0, gear=3, "carb"=1)
predictions <- predict(modelFit_RF, myTesting)
predictions
head(data,10)
myTesting <- data.frame("cyl"=4, "disp"=147, "hp"=62, "drat"=3.7, "wt"=3.2, "qsec"=20, "vs"=1, "am"=0, gear=4, "carb"=2)
predictions <- predict(modelFit_RF, myTesting)
predictions
predictions <- predict(modelFit_RT, myTesting)
predictions
predictions <- predict(modelFit_RPART, myTesting, type = "class")
predictions
ndist()
x   <- seq(5,15,length=1000)
y   <- dnorm(x,mean=10, sd=3)
plot(x,y, type="l", lwd=1)
shiny::runApp()
shiny::runApp()
head(mtcars)
summary(mtcars$cyl)
summary(mtcars$disp)
summary(mtcars$hp)
summary(mtcars$drat)
shiny::runApp()
shiny::runApp()
summary(mtcars$wt)
mtcars
head(data,10)
summary(mtcars$wt)
summary(mtcars$qsec)
summary(mtcars$vs)
summary(mtcars$gear)
summary(mtcars$carb)
shiny::runApp()
shiny::runApp()
shiny::runApp()
modelFit_RF = train(mpg~., method="rf", data=data, prox=TRUE)
shiny::runApp()
myTesting <- data.frame("cyl"=4, "disp"=147, "hp"=62, "drat"=3.7, "wt"=3.2, "qsec"=20, "vs"=1, "am"=0, gear=4, "carb"=2)
predictions <- predict(modelFit_RF, myTesting)
predictions
predictions[1]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
abline?
with(mtcars, {plot(as.formula(myXY()),xlab=input$x,ylab="mpg", main=paste("MPG Vs. ", toupper(input$x)))
abline?
abline?
s
mtcars?
w
?mtcars
?abline
shiny::runApp()
shiny::runApp()
shiny::runApp()
#' @param title character
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
